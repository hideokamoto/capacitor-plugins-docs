{"title":"PaymentFlow","code":["/docs/stripe/payment-flow/payment-flow.ts.md"],"scrollActiveLine":[],"hypertext":"<p>With PaymentFlow, you can make payments in two steps flow. When the user presses the submit button, the system only gets the card information, and puts it in a pending state. After that, when the program executes the confirmation method, the payment is executed. In most cases, it is used in a flow that is interrupted by a final confirmation screen.</p>\n<p>This method can be used for both immediate payment with <code>PaymentIntent</code>, and future payments with <code>SetupIntent</code>.</p>\n<p>Don't know what these Intent is? Learn it first at the official Stripe website.</p>\n<p><strong>PaymentIntent:</strong><br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstripe.com%2Fdocs%2Fpayments%2Fpayment-intents\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stripe.com/docs/payments/payment-intents\" style=\"display: none\" rel=\"nofollow\">https://stripe.com/docs/payments/payment-intents</a></p>\n<p><strong>SetupIntent:</strong><br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstripe.com%2Fdocs%2Fpayments%2Fsave-and-reuse%3Fplatform%3Dweb\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stripe.com/docs/payments/save-and-reuse?platform=web\" style=\"display: none\" rel=\"nofollow\">https://stripe.com/docs/payments/save-and-reuse?platform=web</a></p>\n<h2 id=\"%F0%9F%90%BE-implements\"><a class=\"header-anchor-link\" href=\"#%F0%9F%90%BE-implements\" aria-hidden=\"true\" rel=\"nofollow\"></a> üêæ Implements</h2>\n<h3 id=\"1.-createpaymentflow\"><a class=\"header-anchor-link\" href=\"#1.-createpaymentflow\" aria-hidden=\"true\" rel=\"nofollow\"></a> 1.  createPaymentFlow</h3>\n<p>This method is settings for PaymentFlow. Before use, you should connect to your backend endpoint, and get every key. This is &quot;not&quot; function at this Plugin. So you will use <code>HTTPClient</code> , <code>Axios</code> , <code>Ajax</code> , and so on. Here is example of Angular HttpClient. This method will get <code>paymentIntent</code>, <code>ephemeralKey</code>, and <code>ephemeralKey</code>.</p>\n<p>Stripe provide how to implement backend:<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstripe.com%2Fdocs%2Fpayments%2Faccept-a-payment%3Fplatform%3Dios%23add-server-endpoint\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=ios#add-server-endpoint\" style=\"display: none\" rel=\"nofollow\">https://stripe.com/docs/payments/accept-a-payment?platform=ios#add-server-endpoint</a></p>\n<p>After that, you set these key to <code>createPaymentFlow</code> method. You will need to prepare either paymentIntentClientSecret or setupIntentClientSecret and set it in the method.</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PaymentFlowEventsEnum<span class=\"token punctuation\">,</span> Stripe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor-community/stripe'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Connect to your backend endpoint, and get every key.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>paymentIntent<span class=\"token punctuation\">,</span> ephemeralKey<span class=\"token punctuation\">,</span> customer<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    paymentIntent<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    ephemeralKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    customer<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span>api <span class=\"token operator\">+</span> <span class=\"token string\">'payment-sheet'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPromise</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Prepare PaymentFlow with CreatePaymentFlowOption.</span>\n  Stripe<span class=\"token punctuation\">.</span><span class=\"token function\">createPaymentFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    paymentIntentClientSecret<span class=\"token operator\">:</span> paymentIntent<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// setupIntentClientSecret: setupIntent,</span>\n    customerEphemeralKeySecret<span class=\"token operator\">:</span> ephemeralKey<span class=\"token punctuation\">,</span>\n    customerId<span class=\"token operator\">:</span> customer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>You can use options of <code>CreatePaymentFlowOption</code> on <code>createPaymentFlow</code>.</p>\n<blockquote>\n<h4 id=\"method-createpaymentflow(...)\"><a class=\"header-anchor-link\" href=\"#method-createpaymentflow(...)\" aria-hidden=\"true\" rel=\"nofollow\"></a> <code>method</code> createPaymentFlow(...)</h4>\n<p><code>createPaymentFlow(options: CreatePaymentFlowOption) =&gt; Promise&lt;void&gt;</code></p>\n</blockquote>\n<p>Props <code>paymentIntentClientSecret</code> or <code>setupIntentClientSecret</code>, and <code>customerId</code>, <code>customerEphemeralKeySecret</code> are <strong>required</strong>. And be able to <a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;ui=payment-sheet#ios-flowcontroller\" rel=\"nofollow\">set style</a> <code>alwaysLight</code> or <code>alwaysDark</code>, prepare <a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;ui=payment-sheet#ios-apple-pay\" rel=\"nofollow\">ApplePay</a> and <a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=android&amp;ui=payment-sheet#android-google-pay\" rel=\"nofollow\">GooglePay</a> on PaymentFlow.</p>\n<blockquote>\n<h4 id=\"interface-createpaymentflowoption\"><a class=\"header-anchor-link\" href=\"#interface-createpaymentflowoption\" aria-hidden=\"true\" rel=\"nofollow\"></a> <code>interface</code> CreatePaymentFlowOption</h4>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>paymentIntentClientSecret</code></strong></td>\n<td><code>string</code></td>\n<td>Any documentation call 'paymentIntent' Set paymentIntentClientSecret or setupIntentClientSecret</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><code>setupIntentClientSecret</code></strong></td>\n<td><code>string</code></td>\n<td>Any documentation call 'paymentIntent' Set paymentIntentClientSecret or setupIntentClientSecret</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><code>customerEphemeralKeySecret</code></strong></td>\n<td><code>string</code></td>\n<td>Any documentation call 'ephemeralKey'</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><code>customerId</code></strong></td>\n<td><code>string</code></td>\n<td>Any documentation call 'customer'</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><code>enableApplePay</code></strong></td>\n<td><code>boolean</code></td>\n<td>If you set payment method ApplePay, this set true</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><strong><code>applePayMerchantId</code></strong></td>\n<td><code>string</code></td>\n<td>If set enableApplePay false, Plugin ignore here.</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><code>enableGooglePay</code></strong></td>\n<td><code>boolean</code></td>\n<td>If you set payment method GooglePay, this set true</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><strong><code>GooglePayIsTesting</code></strong></td>\n<td><code>boolean</code></td>\n<td></td>\n<td><code>false,</code></td>\n</tr>\n<tr>\n<td><strong><code>countryCode</code></strong></td>\n<td><code>string</code></td>\n<td>use ApplePay and GooglePay. If set enableApplePay and enableGooglePay false, Plugin ignore here.</td>\n<td><code>&quot;US&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>merchantDisplayName</code></strong></td>\n<td><code>string</code></td>\n<td></td>\n<td><code>&quot;App Name&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>style</code></strong></td>\n<td><code>'alwaysLight' \\| 'alwaysDark'</code></td>\n<td>iOS Only</td>\n<td><code>undefined</code></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"2.-presentpaymentflow\"><a class=\"header-anchor-link\" href=\"#2.-presentpaymentflow\" aria-hidden=\"true\" rel=\"nofollow\"></a> 2. presentPaymentFlow</h3>\n<p>When you do <code>presentPaymentFlow</code> method, plugin present PaymentFlow and get card information. This method must do after <code>createPaymentFlow</code>.</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Present PaymentFlow. **Not completed yet.**</span>\n  <span class=\"token keyword\">const</span> presentResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Stripe<span class=\"token punctuation\">.</span><span class=\"token function\">presentPaymentFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { cardNumber: \"‚óè‚óè‚óè‚óè ‚óè‚óè‚óè‚óè ‚óè‚óè‚óè‚óè ****\" }</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>You can get <code>{ cardNumber: string; }</code> from <code>presentPaymentFlow</code>.</p>\n<blockquote>\n<h4 id=\"method-presentpaymentflow()\"><a class=\"header-anchor-link\" href=\"#method-presentpaymentflow()\" aria-hidden=\"true\" rel=\"nofollow\"></a> <code>method</code> presentPaymentFlow()</h4>\n<p><code>presentPaymentFlow() =&gt; Promise&lt;{ cardNumber: string; }&gt;</code></p>\n</blockquote>\n<p>In do PaymentSheet, <code>presentPaymentSheet</code> method get result. <strong>But in PaymentFlow, <code>presentPaymentFlow</code> method is progress.</strong></p>\n<h3 id=\"3.-confirmpaymentflow\"><a class=\"header-anchor-link\" href=\"#3.-confirmpaymentflow\" aria-hidden=\"true\" rel=\"nofollow\"></a> 3. confirmPaymentFlow</h3>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Confirm PaymentFlow. Completed.</span>\n  <span class=\"token keyword\">const</span> confirmResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Stripe<span class=\"token punctuation\">.</span><span class=\"token function\">confirmPaymentFlow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>paymentResult <span class=\"token operator\">===</span> PaymentFlowEventsEnum<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Happy path</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><code>PaymentFlowResultInterface</code> is created from Enum of <code>PaymentFlowEventsEnum</code>. So you should import and check result.</p>\n<blockquote>\n<h4 id=\"type-alias-paymentflowresultinterface\"><a class=\"header-anchor-link\" href=\"#type-alias-paymentflowresultinterface\" aria-hidden=\"true\" rel=\"nofollow\"></a> <code>type alias</code> PaymentFlowResultInterface</h4>\n<p><code>PaymentFlowEventsEnum.Completed | PaymentFlowEventsEnum.Canceled | PaymentFlowEventsEnum.Failed</code></p>\n</blockquote>\n<h3 id=\"4.-addlistener\"><a class=\"header-anchor-link\" href=\"#4.-addlistener\" aria-hidden=\"true\" rel=\"nofollow\"></a> 4. addListener</h3>\n<p>Method of PaymentFlow notify any listeners. If you want to get event of payment process is 'Completed', you should add <code>PaymentFlowEventsEnum.Completed</code> listener to <code>Stripe</code> object:</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// be able to get event of PaymentFlow</span>\nStripe<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>PaymentFlowEventsEnum<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PaymentFlowEventsEnum.Completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>The event name you can use is <code>PaymentFlowEventsEnum</code>.</p>\n<blockquote>\n<h4 id=\"enum-paymentfloweventsenum\"><a class=\"header-anchor-link\" href=\"#enum-paymentfloweventsenum\" aria-hidden=\"true\" rel=\"nofollow\"></a> <code>enum</code> PaymentFlowEventsEnum</h4>\n<table>\n<thead>\n<tr>\n<th>Members</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>Loaded</code></strong></td>\n<td><code>&quot;paymentFlowLoaded&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>FailedToLoad</code></strong></td>\n<td><code>&quot;paymentFlowFailedToLoad&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>Opened</code></strong></td>\n<td><code>&quot;paymentFlowOpened&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>Created</code></strong></td>\n<td><code>&quot;paymentFlowCreated&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>Completed</code></strong></td>\n<td><code>&quot;paymentFlowCompleted&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>Canceled</code></strong></td>\n<td><code>&quot;paymentFlowCanceled&quot;</code></td>\n</tr>\n<tr>\n<td><strong><code>Failed</code></strong></td>\n<td><code>&quot;paymentFlowFailed&quot;</code></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2 id=\"%F0%9F%93%96-reference\"><a class=\"header-anchor-link\" href=\"#%F0%9F%93%96-reference\" aria-hidden=\"true\" rel=\"nofollow\"></a> üìñ Reference</h2>\n<p>See the Stripe Documentation for more information. This plugin is wrapper, so there information seems useful for you.</p>\n<h3 id=\"complete-the-payment-in-your-own-ui(ios)\"><a class=\"header-anchor-link\" href=\"#complete-the-payment-in-your-own-ui(ios)\" aria-hidden=\"true\" rel=\"nofollow\"></a> Complete the payment in your own UI(iOS)</h3>\n<p>This plugin use PaymentFlow on <code>pod 'Stripe'</code>:</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstripe.com%2Fdocs%2Fpayments%2Faccept-a-payment%3Fplatform%3Dios%26ui%3Dpayment-sheet%23ios-flowcontroller\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;ui=payment-sheet#ios-flowcontroller\" style=\"display: none\" rel=\"nofollow\">https://stripe.com/docs/payments/accept-a-payment?platform=ios&amp;ui=payment-sheet#ios-flowcontroller</a></p>\n<h3 id=\"complete-the-payment-in-your-own-ui(android)\"><a class=\"header-anchor-link\" href=\"#complete-the-payment-in-your-own-ui(android)\" aria-hidden=\"true\" rel=\"nofollow\"></a> Complete the payment in your own UI(Android)</h3>\n<p>This plugin use PaymentFlow on <code>com.stripe:stripe-android</code>:</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fstripe.com%2Fdocs%2Fpayments%2Faccept-a-payment%3Fplatform%3Dandroid%26ui%3Dpayment-sheet%23android-flowcontroller\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://stripe.com/docs/payments/accept-a-payment?platform=android&amp;ui=payment-sheet#android-flowcontroller\" style=\"display: none\" rel=\"nofollow\">https://stripe.com/docs/payments/accept-a-payment?platform=android&amp;ui=payment-sheet#android-flowcontroller</a></p>\n"}